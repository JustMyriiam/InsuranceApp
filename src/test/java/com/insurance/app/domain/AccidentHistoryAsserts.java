package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccidentHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccidentHistoryAllPropertiesEquals(AccidentHistory expected, AccidentHistory actual) {
        assertAccidentHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertAccidentHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccidentHistoryAllUpdatablePropertiesEquals(AccidentHistory expected, AccidentHistory actual) {
        assertAccidentHistoryUpdatableFieldsEquals(expected, actual);
        assertAccidentHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccidentHistoryAutoGeneratedPropertiesEquals(AccidentHistory expected, AccidentHistory actual) {
        assertThat(actual)
            .as("Verify AccidentHistory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccidentHistoryUpdatableFieldsEquals(AccidentHistory expected, AccidentHistory actual) {
        assertThat(actual)
            .as("Verify AccidentHistory relevant properties")
            .satisfies(a -> assertThat(a.getAccidentId()).as("check accidentId").isEqualTo(expected.getAccidentId()))
            .satisfies(a -> assertThat(a.getAccidentDate()).as("check accidentDate").isEqualTo(expected.getAccidentDate()))
            .satisfies(a -> assertThat(a.getSeverity()).as("check severity").isEqualTo(expected.getSeverity()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getRepairCost()).as("check repairCost").isEqualTo(expected.getRepairCost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccidentHistoryUpdatableRelationshipsEquals(AccidentHistory expected, AccidentHistory actual) {
        assertThat(actual)
            .as("Verify AccidentHistory relationships")
            .satisfies(a -> assertThat(a.getContract()).as("check contract").isEqualTo(expected.getContract()))
            .satisfies(a -> assertThat(a.getDocumentSinister()).as("check documentSinister").isEqualTo(expected.getDocumentSinister()));
    }
}
