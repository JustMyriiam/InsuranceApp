package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BlacklistedCarAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlacklistedCarAllPropertiesEquals(BlacklistedCar expected, BlacklistedCar actual) {
        assertBlacklistedCarAutoGeneratedPropertiesEquals(expected, actual);
        assertBlacklistedCarAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlacklistedCarAllUpdatablePropertiesEquals(BlacklistedCar expected, BlacklistedCar actual) {
        assertBlacklistedCarUpdatableFieldsEquals(expected, actual);
        assertBlacklistedCarUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlacklistedCarAutoGeneratedPropertiesEquals(BlacklistedCar expected, BlacklistedCar actual) {
        assertThat(actual)
            .as("Verify BlacklistedCar auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlacklistedCarUpdatableFieldsEquals(BlacklistedCar expected, BlacklistedCar actual) {
        assertThat(actual)
            .as("Verify BlacklistedCar relevant properties")
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getBlacklistDate()).as("check blacklistDate").isEqualTo(expected.getBlacklistDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlacklistedCarUpdatableRelationshipsEquals(BlacklistedCar expected, BlacklistedCar actual) {
        assertThat(actual)
            .as("Verify BlacklistedCar relationships")
            .satisfies(a -> assertThat(a.getCar()).as("check car").isEqualTo(expected.getCar()));
    }
}
