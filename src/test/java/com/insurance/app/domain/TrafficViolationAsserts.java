package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrafficViolationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrafficViolationAllPropertiesEquals(TrafficViolation expected, TrafficViolation actual) {
        assertTrafficViolationAutoGeneratedPropertiesEquals(expected, actual);
        assertTrafficViolationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrafficViolationAllUpdatablePropertiesEquals(TrafficViolation expected, TrafficViolation actual) {
        assertTrafficViolationUpdatableFieldsEquals(expected, actual);
        assertTrafficViolationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrafficViolationAutoGeneratedPropertiesEquals(TrafficViolation expected, TrafficViolation actual) {
        assertThat(actual)
            .as("Verify TrafficViolation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrafficViolationUpdatableFieldsEquals(TrafficViolation expected, TrafficViolation actual) {
        assertThat(actual)
            .as("Verify TrafficViolation relevant properties")
            .satisfies(a -> assertThat(a.getViolationType()).as("check violationType").isEqualTo(expected.getViolationType()))
            .satisfies(a -> assertThat(a.getViolationDate()).as("check violationDate").isEqualTo(expected.getViolationDate()))
            .satisfies(a -> assertThat(a.getPenaltyPoints()).as("check penaltyPoints").isEqualTo(expected.getPenaltyPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrafficViolationUpdatableRelationshipsEquals(TrafficViolation expected, TrafficViolation actual) {
        assertThat(actual)
            .as("Verify TrafficViolation relationships")
            .satisfies(a -> assertThat(a.getDriver()).as("check driver").isEqualTo(expected.getDriver()));
    }
}
