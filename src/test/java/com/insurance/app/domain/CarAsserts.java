package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CarAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarAllPropertiesEquals(Car expected, Car actual) {
        assertCarAutoGeneratedPropertiesEquals(expected, actual);
        assertCarAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarAllUpdatablePropertiesEquals(Car expected, Car actual) {
        assertCarUpdatableFieldsEquals(expected, actual);
        assertCarUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarAutoGeneratedPropertiesEquals(Car expected, Car actual) {
        assertThat(actual)
            .as("Verify Car auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarUpdatableFieldsEquals(Car expected, Car actual) {
        assertThat(actual)
            .as("Verify Car relevant properties")
            .satisfies(a -> assertThat(a.getBrand()).as("check brand").isEqualTo(expected.getBrand()))
            .satisfies(a -> assertThat(a.getModel()).as("check model").isEqualTo(expected.getModel()))
            .satisfies(a -> assertThat(a.getYear()).as("check year").isEqualTo(expected.getYear()))
            .satisfies(a -> assertThat(a.getRegistrationNumber()).as("check registrationNumber").isEqualTo(expected.getRegistrationNumber())
            )
            .satisfies(a -> assertThat(a.getFuelType()).as("check fuelType").isEqualTo(expected.getFuelType()))
            .satisfies(a -> assertThat(a.getTransmission()).as("check transmission").isEqualTo(expected.getTransmission()))
            .satisfies(a -> assertThat(a.getEngineSize()).as("check engineSize").isEqualTo(expected.getEngineSize()))
            .satisfies(a -> assertThat(a.getColor()).as("check color").isEqualTo(expected.getColor()))
            .satisfies(a -> assertThat(a.getMileage()).as("check mileage").isEqualTo(expected.getMileage()))
            .satisfies(a -> assertThat(a.getInsuranceStatus()).as("check insuranceStatus").isEqualTo(expected.getInsuranceStatus()))
            .satisfies(a -> assertThat(a.getCarType()).as("check carType").isEqualTo(expected.getCarType()))
            .satisfies(a -> assertThat(a.getIsBlacklisted()).as("check isBlacklisted").isEqualTo(expected.getIsBlacklisted()))
            .satisfies(a -> assertThat(a.getPriceWhenBought()).as("check priceWhenBought").isEqualTo(expected.getPriceWhenBought()))
            .satisfies(a -> assertThat(a.getCurrentPrice()).as("check currentPrice").isEqualTo(expected.getCurrentPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarUpdatableRelationshipsEquals(Car expected, Car actual) {
        assertThat(actual)
            .as("Verify Car relationships")
            .satisfies(a -> assertThat(a.getContract()).as("check contract").isEqualTo(expected.getContract()))
            .satisfies(a -> assertThat(a.getLocationRisk()).as("check locationRisk").isEqualTo(expected.getLocationRisk()));
    }
}
