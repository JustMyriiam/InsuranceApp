package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocationRiskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationRiskAllPropertiesEquals(LocationRisk expected, LocationRisk actual) {
        assertLocationRiskAutoGeneratedPropertiesEquals(expected, actual);
        assertLocationRiskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationRiskAllUpdatablePropertiesEquals(LocationRisk expected, LocationRisk actual) {
        assertLocationRiskUpdatableFieldsEquals(expected, actual);
        assertLocationRiskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationRiskAutoGeneratedPropertiesEquals(LocationRisk expected, LocationRisk actual) {
        assertThat(actual)
            .as("Verify LocationRisk auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationRiskUpdatableFieldsEquals(LocationRisk expected, LocationRisk actual) {
        assertThat(actual)
            .as("Verify LocationRisk relevant properties")
            .satisfies(a -> assertThat(a.getRegion()).as("check region").isEqualTo(expected.getRegion()))
            .satisfies(a -> assertThat(a.getTheftRisk()).as("check theftRisk").isEqualTo(expected.getTheftRisk()))
            .satisfies(a -> assertThat(a.getAccidentRisk()).as("check accidentRisk").isEqualTo(expected.getAccidentRisk()))
            .satisfies(a -> assertThat(a.getWeatherRisk()).as("check weatherRisk").isEqualTo(expected.getWeatherRisk()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationRiskUpdatableRelationshipsEquals(LocationRisk expected, LocationRisk actual) {
        // empty method
    }
}
