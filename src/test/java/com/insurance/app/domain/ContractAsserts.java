package com.insurance.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract relevant properties")
            .satisfies(a -> assertThat(a.getContractId()).as("check contractId").isEqualTo(expected.getContractId()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getPremiumAmount()).as("check premiumAmount").isEqualTo(expected.getPremiumAmount()))
            .satisfies(a -> assertThat(a.getCoverageDetails()).as("check coverageDetails").isEqualTo(expected.getCoverageDetails()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getRenouvelable()).as("check renouvelable").isEqualTo(expected.getRenouvelable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()));
    }
}
